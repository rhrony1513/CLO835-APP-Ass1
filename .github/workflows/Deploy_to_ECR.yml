name: Deploy to ECR
on: 
  push:
    branches: [ main ]

jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

    steps:

    - name: Check out code
      uses: actions/checkout@v4

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1

    - name: Build, test, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: assignmentdocker-dev-ecr-repo
        IMAGE_TAG: v0.1
      run: |
        # Docker build command
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:mysql$IMAGE_TAG -f Dockerfile_mysql .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:myweb$IMAGE_TAG -f Dockerfile .

        # Creating Network
        docker network create -d bridge new-network 

        # Start MySQL Database
        docker run --name mydatabase --network new-network -d -e MYSQL_ROOT_PASSWORD=${{ secrets.DBPASSWORD }} $ECR_REGISTRY/$ECR_REPOSITORY:mysql$IMAGE_TAG
        
        echo "Pause for 30 seconds to let container start"
        sleep 30

        # Fetch Database Host (Fixed Version)
        export DBHOST=$(docker inspect -f '{{.NetworkSettings.Networks["new-network"].IPAddress}}' mydatabase)
        export DBPORT=3306
        export DBUSER=root

        # Start Web Application
        docker run --name mywebsite --network new-network -p 8080:8080  \
            -e APP_COLOR="blue" -e DBHOST=$DBHOST -e DBPORT=$DBPORT -e DBUSER=$DBUSER -e DBPWD=${{ secrets.DBPASSWORD }}  \
            $ECR_REGISTRY/$ECR_REPOSITORY:myweb$IMAGE_TAG
        
        echo "Pause for 10 seconds to let container start"
        sleep 10

        # Test Website
        curl localhost:8080 -vvv

        # Push Images to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:mysql$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:myweb$IMAGE_TAG
